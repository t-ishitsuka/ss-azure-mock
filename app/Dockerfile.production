# マルチステージビルド - ビルドステージ
FROM node:22-alpine AS builder

# pnpm を有効化
RUN corepack enable && corepack prepare pnpm@latest --activate

# 作業ディレクトリ
WORKDIR /app

# 依存関係ファイルをコピー
COPY package.json pnpm-lock.yaml ./

# Prismaスキーマファイルをコピー（prisma generateに必要）
COPY prisma ./prisma

# 依存関係をインストール（postinstallでprisma generateが実行される）
RUN pnpm install --frozen-lockfile

# アプリケーションファイルをコピー
COPY . .

# Prismaクライアントを明示的に生成
RUN pnpm exec prisma generate

# アプリケーションをビルド
RUN pnpm build

# プロダクションステージ
FROM node:22-alpine AS production

# pnpm を有効化
RUN corepack enable && corepack prepare pnpm@latest --activate

# 必要なパッケージをインストール
RUN apk add --no-cache libc6-compat

# 非rootユーザーを作成
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodejs -u 1001

# 作業ディレクトリ
WORKDIR /app

# ビルド成果物と必要なファイルをコピー
COPY --from=builder --chown=nodejs:nodejs /app/build ./build
COPY --from=builder --chown=nodejs:nodejs /app/public ./public
COPY --from=builder --chown=nodejs:nodejs /app/package.json ./package.json
COPY --from=builder --chown=nodejs:nodejs /app/pnpm-lock.yaml ./pnpm-lock.yaml
COPY --from=builder --chown=nodejs:nodejs /app/prisma ./prisma
# 生成済みのnode_modules全体をコピー（Prismaクライアントを含む）
COPY --from=builder --chown=nodejs:nodejs /app/node_modules ./node_modules

# エントリーポイントスクリプトをコピー（一時的にコメントアウト）
# COPY --chown=nodejs:nodejs docker-entrypoint.sh ./
# RUN chmod +x docker-entrypoint.sh

# ポート80を非rootユーザーでも使用可能にする
RUN apk add --no-cache libcap && \
    setcap 'cap_net_bind_service=+ep' /usr/local/bin/node

# ユーザーを切り替え
USER nodejs

# 環境変数
ENV NODE_ENV=production
ENV PORT=80

# ポートを公開
EXPOSE 80

# エントリーポイントを設定（一時的に無効化）
# ENTRYPOINT ["./docker-entrypoint.sh"]

# アプリケーション起動
CMD ["pnpm", "start"]